<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach(var link in links)
        {
            <li @onclick="@(() => SelectedPageInternal(link))"
                style="cursor: pointer;"
                class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Radius { get; set; }
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links;
    protected override void OnParametersSet()
    {
        LoadPages();
    }
    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPrevPageEnabled = (CurrentPage != 1);
        var prevPage = CurrentPage - 1;
        links.Add(new LinkModel(prevPage, isPrevPageEnabled, "Previous"));

        var startPageNo = Math.Max(1, CurrentPage - (Radius + 1));
        var endPageNo = Math.Min( CurrentPage + Radius + 1,TotalPages);
        //for (int i = 1; i<TotalPages; i++)
        for (int i = startPageNo; i<= endPageNo; i++)
        {
            if(i>=CurrentPage-Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        var isNextPageEnabled = CurrentPage != TotalPages;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageEnabled, "Next"));
    }
    class LinkModel
    {
        public LinkModel(int page) : this(page, true) { }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if(link.Page == CurrentPage)
        {
            return;
        }
        if (!link.Enabled)
        {
            return;
        }

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }
}
